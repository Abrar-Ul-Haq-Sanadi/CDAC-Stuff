module down_counter(
    input clk,
    input reset,
    output reg [3:0] count
);

always @(posedge clk or posedge reset) begin
    if (reset)
        count <= 4'b1111;
    else
        count <= count - 1;
end

endmodule

interface counter_if();
    logic clk;
    logic reset;
    logic [3:0] count;
endinterface

// Include UVM Macros and Import UVM Package
`include "uvm_macros.svh"
import uvm_pkg::*;

// Transaction Class
class transaction extends uvm_sequence_item;
    rand bit [3:0] count;
    
    function new(input string name = "transaction");
        super.new(name);
    endfunction

    uvm_object_utils_begin(transaction)
        uvm_field_int(count, UVM_DEFAULT)
    uvm_object_utils_end
endclass

// Generator Class
class generator extends uvm_sequence #(transaction);
    `uvm_object_utils(generator)

    transaction t;

    function new(input string name = "generator");
        super.new(name);
    endfunction

    virtual task body();
        t = transaction::type_id::create("t");
        repeat(10) begin
            start_item(t);
            t.randomize();
            uvm_info("GEN", $sformatf("Generated count: %0d", t.count), UVM_NONE);
            finish_item(t);
        end
    endtask
endclass

// Driver Class
class driver extends uvm_driver #(transaction);
    `uvm_component_utils(driver)

    transaction tc;
    virtual counter_if cif;

    function new(input string name = "driver", uvm_component parent = null);
        super.new(name, parent);
    endfunction

    virtual function void build_phase(uvm_phase phase);
        super.build_phase(phase);
        if (!uvm_config_db#(virtual counter_if)::get(this, "", "cif", cif))
            uvm_fatal("COUNTER_IF", "Interface not found");
    endfunction

    virtual task run_phase(uvm_phase phase);
        forever begin
            seq_item_port.get_next_item(tc);
            cif.count <= tc.count;
            uvm_info("DRV", $sformatf("Drove count: %0d", tc.count), UVM_NONE);
            seq_item_port.item_done();
            #10;
        end
    endtask
endclass

// Monitor Class
class monitor extends uvm_monitor;
    `uvm_component_utils(monitor)

    uvm_analysis_port #(transaction) send;
    transaction t;
    virtual counter_if cif;

    function new(input string name = "monitor", uvm_component parent = null);
        super.new(name, parent);
        send = new("send", this);
    endfunction

    virtual function void build_phase(uvm_phase phase);
        super.build_phase(phase);
        if (!uvm_config_db#(virtual counter_if)::get(this, "", "cif", cif))
            uvm_fatal("MON", "Interface not found");
    endfunction

    virtual task run_phase(uvm_phase phase);
        forever begin
            #10;
            t = transaction::type_id::create("t");
            t.count = cif.count;
            uvm_info("MON", $sformatf("Monitored count: %0d", t.count), UVM_NONE);
            send.write(t);
        end
    endtask
endclass

// Scoreboard Class
class scoreboard extends uvm_scoreboard;
    `uvm_component_utils(scoreboard)

    uvm_analysis_imp #(transaction, scoreboard) recv;
    transaction tr;

    function new(input string name = "scoreboard", uvm_component parent = null);
        super.new(name, parent);
        recv = new("recv", this);
    endfunction

    virtual function void build_phase(uvm_phase phase);
        super.build_phase(phase);
    endfunction

    virtual function void write(input transaction t);
        tr = t;
        uvm_info("SCO", $sformatf("Scoreboard received count: %0d", tr.count), UVM_NONE);
        // Assuming the monitor captures the count signal directly
        // You can modify the check according to the behavior you expect
        if (tr.count == (4'b1111 - (tr.count % 16))) // Down Counter logic validation
            uvm_info("SCO", "Test Passed", UVM_NONE);
        else
            uvm_error("SCO", "Test Failed");
    endfunction
endclass

// Agent Class
class agent extends uvm_agent;
    `uvm_component_utils(agent)

    monitor m;
    driver d;
    uvm_sequencer #(transaction) seqr;

    function new(input string name = "agent", uvm_component parent = null);
        super.new(name, parent);
    endfunction

    virtual function void build_phase(uvm_phase phase);
        super.build_phase(phase);
        m = monitor::type_id::create("m", this);
        d = driver::type_id::create("d", this);
        seqr = uvm_sequencer #(transaction)::type_id::create("seqr", this);
    endfunction

    virtual function void connect_phase(uvm_phase phase);
        super.connect_phase(phase);
        d.seq_item_port.connect(seqr.seq_item_export);
    endfunction
endclass

// Environment Class
class env extends uvm_env;
    `uvm_component_utils(env)

    scoreboard s;
    agent a;

    function new(input string name = "env", uvm_component parent = null);
        super.new(name, parent);
    endfunction

    virtual function void build_phase(uvm_phase phase);
        super.build_phase(phase);
        s = scoreboard::type_id::create("s", this);
        a = agent::type_id::create("a", this);
    endfunction

    virtual function void connect_phase(uvm_phase phase);
        super.connect_phase(phase);
        a.m.send.connect(s.recv);
    endfunction
endclass

// Test Class
class test extends uvm_test;
    `uvm_component_utils(test)

    generator gen;
    env e;

    function new(input string name = "test", uvm_component parent = null);
        super.new(name, parent);
    endfunction

    virtual function void build_phase(uvm_phase phase);
        super.build_phase(phase);
        gen = generator::type_id::create("gen");
        e = env::type_id::create("e", this);
    endfunction

    virtual task run_phase(uvm_phase phase);
        phase.raise_objection(this);
        gen.start(e.a.seqr);
        #50;
        phase.drop_objection(this);
    endtask
endclass

// Testbench Top Module
module counter_tb();

counter_if cif();

down_counter dut (.clk(cif.clk), .reset(cif.reset), .count(cif.count));

initial begin
    $dumpfile("dump.vcd");
    $dumpvars;
end

initial begin
    uvm_config_db#(virtual counter_if)::set(null, "uvm_test_top.e.a*", "cif", cif);
    run_test("test");
end

endmodule
